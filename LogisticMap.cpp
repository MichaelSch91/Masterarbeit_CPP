// LogisticMap.cpp : Diese Datei enthält die Funktion "main". Hier beginnt und endet die Ausführung des Programms.
//

// list::max_size
#include <iostream>
#include <list>
#include <string>
#include <vector>
#include <unordered_set>
#include <tuple>
#include <cmath>
#include <iomanip>

#include "LogisticMapCalc.h"
#include "Logisticmap_float.h"
#include "Logisticmap_double.h"
#include "Logisticmap_long_double.h"

#include "Zahlendarstellung.h"
#include "Zahlenverteilung.h"
#include "Float16.h"
#include "Float32.h"
#include "ExperimentalDefault.h"
#include "Default32squareroot.h"
#include "Logisticmap_float16.h"
#include "Logisticmap_float32.h"
#include "Logisticmap_Default32squareroot.h"

#include "CSV_data.h"
#include "Default32squareroot_test.h"
#include <chrono>

//config
bool create_csv = 1;

static void logMap_default32squareroot(double s, double start_increment, double r);
static void logMap_float(double s, double start_increment, double r);


static void zeitmessung_logmap_default32squareroot(double s, double start_increment, double r) {
	auto start = std::chrono::high_resolution_clock::now();
	logMap_default32squareroot(s, start_increment, r);
	auto ende = std::chrono::high_resolution_clock::now();

	auto dauer = std::chrono::duration_cast<std::chrono::milliseconds>(ende -
		start);
	std::cout << "Default32Squareroot: r = " << r << " s = " << s << " s_incr = " << start_increment << std::endl;
	std::cout << "Die Simulation der logistischen Abbildung dauerte: " << dauer.count() << " Millisekunden." << std::endl;
}

static void zeitmessung_logmap_float(double s, double start_increment, double r) {
	auto start = std::chrono::high_resolution_clock::now();
	logMap_float(s, start_increment, r);
	auto ende = std::chrono::high_resolution_clock::now();

	auto dauer = std::chrono::duration_cast<std::chrono::milliseconds>(ende -
		start);
	std::cout << "Float: r = " << r << " s = " << s << " s_incr = " << start_increment << std::endl;
	std::cout << "Die Simulation der logistischen Abbildung dauerte: " << dauer.count() << " Millisekunden." << std::endl;
}

static void logMap_float(double s, double start_increment, double r) {
	double START = s;
	double START_INCREMENT = start_increment;

	double start = START;

	while (start < 1.0) {
		Logisticmap_float fl(start, r);
		// std::cout << "Float, ";
		// fl.list_screen_csv(fl.get_long_double_List());
		start += START_INCREMENT;
	}

	std::cout << '\n' << '\n';
}

static void logMap_default32squareroot(double s, double start_increment, double r) {
	double START = s;
	double START_INCREMENT = start_increment;

	double start = START;

	while (start < 1.0) {
		Logisticmap_Default32squareroot logMap(Default32squareroot::convert_to_Default32squareroot(2, start), Default32squareroot::convert_to_Default32squareroot(2, r));
		// std::cout << "squareroot, ";
		// logMap.list_screen_csv();
		start += START_INCREMENT;
	}
	std::cout << '\n' << '\n';
}

static float newtonVerfahren_float(long double a, long double s, int iterations) {
	float x = s; // Startwert
	float radikand = a;
	for (int i = 0; i <= iterations; i++) {
		x = (x + radikand / x) / 2.0f;
	}
	return x;
}

static long double newtonVerfahren_long_double(long double a, long double s, int iterations) {
	long double x = s; // Startwert
	for (int i = 0; i <= iterations; i++) {
		x = (x + a / x) / 2.0;
	}
	return x;
}

static Default32squareroot newtonVerfahren_Default32squareroot(long double a, long double s, int iterations) {
	Default32squareroot x = Default32squareroot::convert_to_Default32squareroot(2, s); // Startwert
	Default32squareroot radikand = Default32squareroot::convert_to_Default32squareroot(2, a);
	Default32squareroot zwei = Default32squareroot(2, 0, 129, 0);
	for (int i = 0; i <= iterations; i++) {
		x = (x + radikand / x) / zwei;
	}
	return x;
}

static void newtonVerfahren_Vergleich(long double a, long double s, int iterations, long double max) {
	int counter_float = 0;
	int counter_sqrt2 = 0;
	int counter_equal = 0;

	while (a <= max) {
		if (abs((long double)newtonVerfahren_float(a, s, iterations) - newtonVerfahren_long_double(a, s, iterations)) < abs(newtonVerfahren_Default32squareroot(a, s, iterations).calcX() - newtonVerfahren_long_double(a, s, iterations))) {
			//std::cout << "Float ist besser" << '\n';
			counter_float++;
		}
		else if (abs((long double)newtonVerfahren_float(a, s, iterations) - newtonVerfahren_long_double(a, s, iterations)) == abs(newtonVerfahren_Default32squareroot(a, s, iterations).calcX() - newtonVerfahren_long_double(a, s, iterations))) {
			//std::cout << "beide gleich" << '\n';
			counter_equal++;
		}
		else {
			//std::cout << "Sqrt2 ist besser" << '\n';
			counter_sqrt2++;
		}
		a += 1.0;
	}
	std::cout << iterations << "Iterationen: ";
	std::cout << "Float: " << counter_float << " Sqrt2: " << counter_sqrt2 << " gleich: " << counter_equal << '\n';
}

static void newtonVerfahren_Vergleich_MathSqrt(long double a, long double s, int iterations, long double max) {
	int counter_float = 0;
	int counter_sqrt2 = 0;
	int counter_equal = 0;

	while (a <= max) {
		if (abs((long double)newtonVerfahren_float(a, s, iterations) - sqrt(a)) < abs(newtonVerfahren_Default32squareroot(a, s, iterations).calcX() - sqrt(a))) {
			//std::cout << "Float ist besser" << '\n';
			counter_float++;
		}
		else if (abs((long double)newtonVerfahren_float(a, s, iterations) - sqrt(a)) == abs(newtonVerfahren_Default32squareroot(a, s, iterations).calcX() - sqrt(a))) {
			//std::cout << "beide gleich" << '\n';
			counter_equal++;
		}
		else {
			//std::cout << "Sqrt2 ist besser" << '\n';
			counter_sqrt2++;
		}
		a += 1.0;
	}
	std::cout << iterations << "Iterationen: ";
	std::cout << "Float: " << counter_float << " Sqrt2: " << counter_sqrt2 << " gleich: " << counter_equal << '\n';
}

static void operatorTestPlus(std::vector<long double> values_1, std::vector<long double> values_2) {
	int counter_float = 0;
	int counter_sqrt2 = 0;
	int counter_equal = 0;

	Default32squareroot sqrt_result(2, 0, 126, 0);
	float fl_result = 0;
	long double comparator = 0;

	for (int i = 0; i < std::min(values_1.size(), values_2.size()); i++) {
		sqrt_result = Default32squareroot::convert_to_Default32squareroot(2, values_1[i]) + Default32squareroot::convert_to_Default32squareroot(2, values_2[i]);
		fl_result = (float)values_1[i] + (float)values_2[i];
		comparator = values_1[i] + values_2[i];

		if (abs((long double)fl_result - comparator) < abs(sqrt_result.calcX() - comparator)) {
			//std::cout << "Float ist besser" << '\n';
			counter_float++;
		}
		else if (abs((long double)fl_result - comparator) == abs(sqrt_result.calcX() - comparator)) {
			//std::cout << "beide gleich" << '\n';
			counter_equal++;
		}
		else {
			//std::cout << "Sqrt2 ist besser" << '\n';
			counter_sqrt2++;
		}
	}
	std::cout << "Plus: ";
	std::cout << "Float: " << counter_float << " Sqrt2: " << counter_sqrt2 << " gleich: " << counter_equal << '\n';
}

static void operatorTestMinus(std::vector<long double> values_1, std::vector<long double> values_2) {
	int counter_float = 0;
	int counter_sqrt2 = 0;
	int counter_equal = 0;

	Default32squareroot sqrt_result(2, 0, 126, 0);
	float fl_result = 0;
	long double comparator = 0;

	for (int i = 0; i < std::min(values_1.size(), values_2.size()); i++) {
		sqrt_result = Default32squareroot::convert_to_Default32squareroot(2, values_1[i]) - Default32squareroot::convert_to_Default32squareroot(2, values_2[i]);
		fl_result = (float)values_1[i] - (float)values_2[i];
		comparator = values_1[i] - values_2[i];

		if (abs((long double)fl_result - comparator) < abs(sqrt_result.calcX() - comparator)) {
			//std::cout << "Float ist besser" << '\n';
			counter_float++;
		}
		else if (abs((long double)fl_result - comparator) == abs(sqrt_result.calcX() - comparator)) {
			//std::cout << "beide gleich" << '\n';
			counter_equal++;
		}
		else {
			//std::cout << "Sqrt2 ist besser" << '\n';
			counter_sqrt2++;
		}
	}
	std::cout << "Minus: ";
	std::cout << "Float: " << counter_float << " Sqrt2: " << counter_sqrt2 << " gleich: " << counter_equal << '\n';
}

static void operatorTestMultiply(std::vector<long double> values_1, std::vector<long double> values_2) {
	int counter_float = 0;
	int counter_sqrt2 = 0;
	int counter_equal = 0;

	Default32squareroot sqrt_result(2, 0, 126, 0);
	float fl_result = 0;
	long double comparator = 0;

	for (int i = 0; i < std::min(values_1.size(), values_2.size()); i++) {
		sqrt_result = Default32squareroot::convert_to_Default32squareroot(2, values_1[i]) * Default32squareroot::convert_to_Default32squareroot(2, values_2[i]);
		fl_result = (float)values_1[i] * (float)values_2[i];
		comparator = values_1[i] * values_2[i];

		if (abs((long double)fl_result - comparator) < abs(sqrt_result.calcX() - comparator)) {
			//std::cout << "Float ist besser" << '\n';
			counter_float++;
		}
		else if (abs((long double)fl_result - comparator) == abs(sqrt_result.calcX() - comparator)) {
			//std::cout << "beide gleich" << '\n';
			counter_equal++;
		}
		else {
			//std::cout << "Sqrt2 ist besser" << '\n';
			counter_sqrt2++;
		}
	}
	std::cout << "Multiply: ";
	std::cout << "Float: " << counter_float << " Sqrt2: " << counter_sqrt2 << " gleich: " << counter_equal << '\n';
}


void findHighestValue(std::vector<long double> numbers) {
	// --- CRITICAL: Always check if the vector is empty ---
	if (numbers.empty()) {
		std::cout << "The vector is empty. Cannot find the lowest value." << std::endl;
		return;
	}

	// 1. Find the iterator to the smallest element
	auto max_iterator = std::max_element(numbers.begin(), numbers.end());

	// 2. Get the value by dereferencing the iterator with *
	long double highest_value = *max_iterator;

	// (Optional) 3. Find the index of that element
	auto index = std::distance(numbers.begin(), max_iterator);


	std::cout << "The lowest value in the vector is: " << highest_value << std::endl;
	std::cout << "It is located at index: " << index << std::endl;
}

void findLowestValue(std::vector<long double> numbers) {
	// --- CRITICAL: Always check if the vector is empty ---
	if (numbers.empty()) {
		std::cout << "The vector is empty. Cannot find the lowest value." << std::endl;
		return;
	}

	// 1. Find the iterator to the smallest element
	auto min_iterator = std::min_element(numbers.begin(), numbers.end());

	// 2. Get the value by dereferencing the iterator with *
	long double lowest_value = *min_iterator;

	// (Optional) 3. Find the index of that element
	auto index = std::distance(numbers.begin(), min_iterator);


	std::cout << "The lowest value in the vector is: " << lowest_value << std::endl;
	std::cout << "It is located at index: " << index << std::endl;
}


static void operatorTest(std::vector<long double> values_1, std::vector<long double> values_2) {
	std::cout << "sizes: " << values_1.size() << " and " << values_2.size() << '\n';
	findLowestValue(values_1);
	findLowestValue(values_2);
	findHighestValue(values_1);
	findHighestValue(values_2);
	operatorTestPlus(values_1, values_2);
	operatorTestMinus(values_1, values_2);
	operatorTestMultiply(values_1, values_2);
}


int main()
{
	std::cout << "Start" << '\n';

	std::vector<long double> ld_1000_100000_values_1 = {
	89383.213456391414918471L, 90312.443033503892365843L, 88130.685816960176452994L, 5744.168582455327850766L, 95959.049618178105447441L, 41183.078235338107333519L, 34503.951598463900154456L, 3724.875150821950228419L, 7254.195655325893312693L, 88265.176427387457806617L,
	73419.605333501182030886L, 1941.13575932598905638L, 31921.082725450454745442L, 40384.865324227081146091L, 3328.694294158493103169L, 97715.42903529328760691L, 3624.966373733273940161L, 62232.067332204664126039L, 73504.629391039023175836L, 20389.049447228811914101L,
	4513.118933202815242112L, 7733.91136510344222188L, 95859.98292817291803658L, 11460.6025134810769232L, 2697.51443675032351166L, 11526.438258682261221111L, 60844.755835928197484463L, 43981.670233075274154544L, 97412.358243405760731548L, 28148.174826569622382522L,
	6233.15939227188937366L, 68763.535817215335555375L, 31696.883393963216803968L, 7869.011854199692606926L, 14002.348639209754765034L, 9668.232147321687079966L, 72411.096956241352017969L, 86737.781685317749972455L, 57488.740871926653198898L, 57169.870230303031092137L,
	99153.111867169267497957L, 5632.783103138848673552L, 21319.957683101529255509L, 44033.45520892017521L, 68535.839886470639612523L, 36567.11295286472886799L, 9740.063261208066251129L, 57978.89205139857949689L, 4011.660144576337188482L, 63806.969185124675277621L,
	9306.326233157538808882L, 72689.659972322319052182L, 18583.565860492817591876L, 20380.08182526848395355L, 38166.42514106587623246L, 3326.273030806449241936L, 56191.08562187067582272L, 14811.23351989476941526L, 9840.400508115679258481L, 49764.383188203966710716L,
	6468.212711041909642518L, 23055.733591469004750252L, 83660.106883260421454906L, 84323.084895089268684387L, 98982.527376044774427999L, 72159.956743958930019289L, 36056.223842602397780865L, 84545.922036612988449633L, 9897.100539151520933956L, 31321.49392095988150686L,
	16668.61869818827835843L, 22108.665975005933432839L, 9797.319765275053214282L, 60814.717140880005900003L, 88220.013583204912719608L, 65548.74127025983761996L, 58494.750849174160975963L, 53238.1691238692146726L, 6800.743126868212130009L, 51109.111822557140840217L,
	6408.067160759004764259L, 75591.139519184536766261L, 62230.137837835005484521L, 1076.678438311355421319L, 48439.066487802425400615L, 7705.511874288087710738L, 80479.549242940847762047L, 58451.92131232819520023L, 15309.83984852084540762L, 29019.264264779427321628L,
	27836.815340626344550401L, 33261.265273398981662467L, 21971.071649178979016142L, 2221.722510006278753281L, 15004.148119106044759974L, 95930.563223075296264142L, 30335.787498717836570001L, 61615.110515152511652559L, 97711.164391694997902959L, 81427.653457585314754397L,
	89311.968233480118215084L, 63865.176465362193994224L, 51584.184333679237169865L, 32306.58622151636518538L, 26916.964958178665256128L, 17298.71078726585255938L, 90709.688320493820356205L, 10696.883375837263884022L, 31313.257545686036028182L, 71500.914041164971422404L,
	3951.728952402947470546L, 1799.38883597010862925L, 1409.288012670265743455L, 5395.780133486026909668L, 73062.245239276962820441L, 58170.817342672497034073L, 15096.096765750844497234L, 99540.38023023249115795L, 37500.518602492986246943L, 25969.837837930826935917L,
	78696.657564756547800731L, 4619.467812030081395642L, 16954.912384784227469936L, 97135.250567086884984747L, 73932.189578278717817739L, 58682.029808940540533513L, 85651.942730304900323972L, 64998.68114389036782086L, 20389.260849767277250066L, 14502.990435889601939125L,
	1675.295171764213591814L, 3105.733621764811687171L, 68060.005510002811206505L, 49764.312959632836282253L, 19446.545802377350628376L, 92109.117180907167494297L, 3035.797275466844439507L, 85586.315570535312872379L, 63842.164317132846917957L, 82959.083758327935356647L,
	67851.047864834778010845L, 62615.15830022213049233L, 96323.518974864797199264L, 64969.014295982720796019L, 6917.470404746651183814L, 23789.261272780131548643L, 18274.520478010410442948L, 36340.528657662827754393L, 65005.178875323850661516L, 22108.406981881591491401L,
	43477.301322051673200913L, 58319.492576973396353424L, 28148.974003348266705871L, 8933.276632420602254569L, 38116.790933543117716908L, 80456.906001007999293506L, 80629.567083049187116558L, 8820.730248270556330681L, 77319.982260742108337581L, 97792.052671048499178141L,
	27830.655868846748489887L, 11477.535031267238082364L, 7254.91295486522722058L, 80608.204565706488210708L, 94270.838531771616544574L, 46182.253013898618519306L, 31925.323533969232812524L, 12694.020297672221204266L, 9897.696773539879359305L, 25264.440263300901278853L,
	37785.161099688499234617L, 63865.176465362193994224L, 16327.915233682957477868L, 83168.324391696514794603L, 49845.890664878214011L, 90895.834199104050640017L, 60464.766380126704461873L, 58913.364436531905084848L, 24043.682337777443153784L, 78871.366389146947767586L,
	34139.799982463824562728L, 46979.8093351221177727L, 21971.071649178979016142L, 43900.569502859143540263L, 24706.746194488310720772L, 72175.760773099726066L, 21973.916173007455654442L, 95930.563223075296264142L, 30335.787498717836570001L, 61615.110515152511652559L,
	75047.88211029302328825L, 7892.298246734135318548L, 55152.091171809006482363L, 4612.441113063541706651L, 31696.883393963216803968L, 7869.011854199692606926L, 14002.348639209754765034L, 35503.95541602757293731L, 55953.518602492986246943L, 25969.837837930826935917L,
	78696.657564756547800731L, 4619.467812030081395642L, 16954.912384784227469936L, 97135.250567086884984747L, 73932.189578278717817739L, 58682.029808940540533513L, 85651.942730304900323972L, 64998.68114389036782086L, 20389.260849767277250066L, 14502.990435889601939125L,
	1675.295171764213591814L, 3105.733621764811687171L, 68060.005510002811206505L, 49764.312959632836282253L, 19446.545802377350628376L, 92109.117180907167494297L, 3035.797275466844439507L, 85586.315570535312872379L, 63842.164317132846917957L, 82959.083758327935356647L,
	67851.047864834778010845L, 62615.15830022213049233L, 96323.518974864797199264L, 64969.014295982720796019L, 6917.470404746651183814L, 23789.261272780131548643L, 18274.520478010410442948L, 36340.528657662827754393L, 65005.178875323850661516L, 22108.406981881591491401L,
	43477.301322051673200913L, 58319.492576973396353424L, 28148.974003348266705871L, 8933.276632420602254569L, 38116.790933543117716908L, 80456.906001007999293506L, 80629.567083049187116558L, 8820.730248270556330681L, 77319.982260742108337581L, 97792.052671048499178141L,
	27830.655868846748489887L, 11477.535031267238082364L, 7254.91295486522722058L, 80608.204565706488210708L, 94270.838531771616544574L, 46182.253013898618519306L, 31925.323533969232812524L, 12694.020297672221204266L, 9897.696773539879359305L, 25264.440263300901278853L,
	16241.464157125330530107L, 43981.670233075274154544L, 97412.358243405760731548L, 28148.174826569622382522L, 6233.15939227188937366L, 68763.535817215335555375L, 31696.883393963216803968L, 7869.011854199692606926L, 14002.348639209754765034L, 9668.232147321687079966L,
	72411.096956241352017969L, 86737.781685317749972455L, 57488.740871926653198898L, 57169.870230303031092137L, 99153.111867169267497957L, 5632.783103138848673552L, 21319.957683101529255509L, 44033.45520892017521L, 68535.839886470639612523L, 36567.11295286472886799L,
	9740.063261208066251129L, 57978.89205139857949689L, 4011.660144576337188482L, 63806.969185124675277621L, 9306.326233157538808882L, 72689.659972322319052182L, 18583.565860492817591876L, 20380.08182526848395355L, 38166.42514106587623246L, 3326.273030806449241936L,
	56191.08562187067582272L, 14811.23351989476941526L, 9840.400508115679258481L, 49764.383188203966710716L, 6468.212711041909642518L, 23055.733591469004750252L, 83660.106883260421454906L, 84323.084895089268684387L, 98982.527376044774427999L, 72159.956743958930019289L,
	36056.223842602397780865L, 84545.922036612988449633L, 9897.100539151520933956L, 31321.49392095988150686L, 16668.61869818827835843L, 22108.665975005933432839L, 9797.319765275053214282L, 60814.717140880005900003L, 88220.013583204912719608L, 65548.74127025983761996L,
	58494.750849174160975963L, 53238.1691238692146726L, 6800.743126868212130009L, 51109.111822557140840217L, 6408.067160759004764259L, 75591.139519184536766261L, 62230.137837835005484521L, 1076.678438311355421319L, 48439.066487802425400615L, 7705.511874288087710738L,
	80479.549242940847762047L, 58451.92131232819520023L, 15309.83984852084540762L, 29019.264264779427321628L, 27836.815340626344550401L, 33261.265273398981662467L, 21971.071649178979016142L, 2221.722510006278753281L, 15004.148119106044759974L, 95930.563223075296264142L,
	30335.787498717836570001L, 61615.110515152511652559L, 97711.164391694997902959L, 81427.653457585314754397L, 89311.968233480118215084L, 63865.176465362193994224L, 51584.184333679237169865L, 32306.58622151636518538L, 26916.964958178665256128L, 17298.71078726585255938L,
	90709.688320493820356205L, 10696.883375837263884022L, 31313.257545686036028182L, 71500.914041164971422404L, 3951.728952402947470546L, 1799.38883597010862925L, 1409.288012670265743455L, 5395.780133486026909668L, 73062.245239276962820441L, 58170.817342672497034073L,
	15096.096765750844497234L, 99540.38023023249115795L, 37500.518602492986246943L, 25969.837837930826935917L, 78696.657564756547800731L, 4619.467812030081395642L, 16954.912384784227469936L, 97135.250567086884984747L, 73932.189578278717817739L, 58682.029808940540533513L,
	85651.942730304900323972L, 64998.68114389036782086L, 20389.260849767277250066L, 14502.990435889601939125L, 1675.295171764213591814L, 3105.733621764811687171L, 68060.005510002811206505L, 49764.312959632836282253L, 19446.545802377350628376L, 92109.117180907167494297L,
	3035.797275466844439507L, 85586.315570535312872379L, 63842.164317132846917957L, 82959.083758327935356647L, 67851.047864834778010845L, 62615.15830022213049233L, 96323.518974864797199264L, 64969.014295982720796019L, 6917.470404746651183814L, 23789.261272780131548643L,
	18274.520478010410442948L, 36340.528657662827754393L, 65005.178875323850661516L, 22108.406981881591491401L, 43477.301322051673200913L, 58319.492576973396353424L, 28148.974003348266705871L, 8933.276632420602254569L, 38116.790933543117716908L, 80456.906001007999293506L,
	80629.567083049187116558L, 8820.730248270556330681L, 77319.982260742108337581L, 97792.052671048499178141L, 27830.655868846748489887L, 11477.535031267238082364L, 7254.91295486522722058L, 80608.204565706488210708L, 94270.838531771616544574L, 46182.253013898618519306L,
	31925.323533969232812524L, 12694.020297672221204266L, 9897.696773539879359305L, 25264.440263300901278853L, 37785.161099688499234617L, 63865.176465362193994224L, 16327.915233682957477868L, 83168.324391696514794603L, 49845.890664878214011L, 90895.834199104050640017L,
	60464.766380126704461873L, 58913.364436531905084848L, 24043.682337777443153784L, 78871.366389146947767586L, 34139.799982463824562728L, 46979.8093351221177727L, 21971.071649178979016142L, 43900.569502859143540263L, 24706.746194488310720772L, 72175.760773099726066L,
	21973.916173007455654442L, 95930.563223075296264142L, 30335.787498717836570001L, 61615.110515152511652559L, 75047.88211029302328825L, 7892.298246734135318548L, 55152.091171809006482363L, 4612.441113063541706651L, 31696.883393963216803968L, 7869.011854199692606926L
	};
	std::vector<long double> ld_1000_100000_values_2 = {
	63450.932789118029177191L, 11333.62681023770637701L, 34228.614619451109319925L, 66311.192534887290094048L, 93633.250106990497443825L, 77884.223842602397780865L, 81075.645700201625004411L, 9897.100539151520933956L, 19688.397086884826421738L, 34139.799982463824562728L,
	46979.8093351221177727L, 21971.071649178979016142L, 43900.569502859143540263L, 24706.746194488310720772L, 72175.760773099726066L, 21973.916173007455654442L, 95930.563223075296264142L, 30335.787498717836570001L, 61615.110515152511652559L, 75047.88211029302328825L,
	7892.298246734135318548L, 55152.091171809006482363L, 4612.441113063541706651L, 31696.883393963216803968L, 7869.011854199692606926L, 14002.348639209754765034L, 35503.95541602757293731L, 55953.518602492986246943L, 25969.837837930826935917L, 78696.657564756547800731L,
	4619.467812030081395642L, 16954.912384784227469936L, 97135.250567086884984747L, 73932.189578278717817739L, 58682.029808940540533513L, 85651.942730304900323972L, 64998.68114389036782086L, 20389.260849767277250066L, 14502.990435889601939125L, 1675.295171764213591814L,
	3105.733621764811687171L, 68060.005510002811206505L, 49764.312959632836282253L, 19446.545802377350628376L, 92109.117180907167494297L, 3035.797275466844439507L, 85586.315570535312872379L, 63842.164317132846917957L, 82959.083758327935356647L, 67851.047864834778010845L,
	62615.15830022213049233L, 96323.518974864797199264L, 64969.014295982720796019L, 6917.470404746651183814L, 23789.261272780131548643L, 18274.520478010410442948L, 36340.528657662827754393L, 65005.178875323850661516L, 22108.406981881591491401L, 43477.301322051673200913L,
	58319.492576973396353424L, 28148.974003348266705871L, 8933.276632420602254569L, 38116.790933543117716908L, 80456.906001007999293506L, 80629.567083049187116558L, 8820.730248270556330681L, 77319.982260742108337581L, 97792.052671048499178141L, 27830.655868846748489887L,
	11477.535031267238082364L, 7254.91295486522722058L, 80608.204565706488210708L, 94270.838531771616544574L, 46182.253013898618519306L, 31925.323533969232812524L, 12694.020297672221204266L, 9897.696773539879359305L, 25264.440263300901278853L, 16241.464157125330530107L,
	43981.670233075274154544L, 97412.358243405760731548L, 28148.174826569622382522L, 6233.15939227188937366L, 68763.535817215335555375L, 31696.883393963216803968L, 7869.011854199692606926L, 14002.348639209754765034L, 9668.232147321687079966L, 72411.096956241352017969L,
	86737.781685317749972455L, 57488.740871926653198898L, 57169.870230303031092137L, 99153.111867169267497957L, 5632.783103138848673552L, 21319.957683101529255509L, 44033.45520892017521L, 68535.839886470639612523L, 36567.11295286472886799L, 9740.063261208066251129L,
	57978.89205139857949689L, 4011.660144576337188482L, 63806.969185124675277621L, 9306.326233157538808882L, 72689.659972322319052182L, 18583.565860492817591876L, 20380.08182526848395355L, 38166.42514106587623246L, 3326.273030806449241936L, 56191.08562187067582272L,
	14811.23351989476941526L, 9840.400508115679258481L, 49764.383188203966710716L, 6468.212711041909642518L, 23055.733591469004750252L, 83660.106883260421454906L, 84323.084895089268684387L, 98982.527376044774427999L, 72159.956743958930019289L, 36056.223842602397780865L,
	84545.922036612988449633L, 9897.100539151520933956L, 31321.49392095988150686L, 16668.61869818827835843L, 22108.665975005933432839L, 9797.319765275053214282L, 60814.717140880005900003L, 88220.013583204912719608L, 65548.74127025983761996L, 58494.750849174160975963L,
	53238.1691238692146726L, 6800.743126868212130009L, 51109.111822557140840217L, 6408.067160759004764259L, 75591.139519184536766261L, 62230.137837835005484521L, 1076.678438311355421319L, 48439.066487802425400615L, 7705.511874288087710738L, 80479.549242940847762047L,
	58451.92131232819520023L, 15309.83984852084540762L, 29019.264264779427321628L, 27836.815340626344550401L, 33261.265273398981662467L, 21971.071649178979016142L, 2221.722510006278753281L, 15004.148119106044759974L, 95930.563223075296264142L, 30335.787498717836570001L,
	61615.110515152511652559L, 97711.164391694997902959L, 81427.653457585314754397L, 89311.968233480118215084L, 63865.176465362193994224L, 51584.184333679237169865L, 32306.58622151636518538L, 26916.964958178665256128L, 17298.71078726585255938L, 90709.688320493820356205L,
	10696.883375837263884022L, 31313.257545686036028182L, 71500.914041164971422404L, 3951.728952402947470546L, 1799.38883597010862925L, 1409.288012670265743455L, 5395.780133486026909668L, 73062.245239276962820441L, 58170.817342672497034073L, 15096.096765750844497234L,
	99540.38023023249115795L, 37500.518602492986246943L, 25969.837837930826935917L, 78696.657564756547800731L, 4619.467812030081395642L, 16954.912384784227469936L, 97135.250567086884984747L, 73932.189578278717817739L, 58682.029808940540533513L, 85651.942730304900323972L,
	64998.68114389036782086L, 20389.260849767277250066L, 14502.990435889601939125L, 1675.295171764213591814L, 3105.733621764811687171L, 68060.005510002811206505L, 49764.312959632836282253L, 19446.545802377350628376L, 92109.117180907167494297L, 3035.797275466844439507L,
	85586.315570535312872379L, 63842.164317132846917957L, 82959.083758327935356647L, 67851.047864834778010845L, 62615.15830022213049233L, 96323.518974864797199264L, 64969.014295982720796019L, 6917.470404746651183814L, 23789.261272780131548643L, 18274.520478010410442948L,
	36340.528657662827754393L, 65005.178875323850661516L, 22108.406981881591491401L, 43477.301322051673200913L, 58319.492576973396353424L, 28148.974003348266705871L, 8933.276632420602254569L, 38116.790933543117716908L, 80456.906001007999293506L, 80629.567083049187116558L,
	8820.730248270556330681L, 77319.982260742108337581L, 97792.052671048499178141L, 27830.655868846748489887L, 11477.535031267238082364L, 7254.91295486522722058L, 80608.204565706488210708L, 94270.838531771616544574L, 46182.253013898618519306L, 31925.323533969232812524L,
	12694.020297672221204266L, 9897.696773539879359305L, 25264.440263300901278853L, 37785.161099688499234617L, 63865.176465362193994224L, 16327.915233682957477868L, 83168.324391696514794603L, 49845.890664878214011L, 90895.834199104050640017L, 60464.766380126704461873L,
	58913.364436531905084848L, 24043.682337777443153784L, 78871.366389146947767586L, 34139.799982463824562728L, 46979.8093351221177727L, 21971.071649178979016142L, 43900.569502859143540263L, 24706.746194488310720772L, 72175.760773099726066L, 21973.916173007455654442L,
	95930.563223075296264142L, 30335.787498717836570001L, 61615.110515152511652559L, 75047.88211029302328825L, 7892.298246734135318548L, 55152.091171809006482363L, 4612.441113063541706651L, 31696.883393963216803968L, 7869.011854199692606926L, 14002.348639209754765034L,
	35503.95541602757293731L, 55953.518602492986246943L, 25969.837837930826935917L, 78696.657564756547800731L, 4619.467812030081395642L, 16954.912384784227469936L, 97135.250567086884984747L, 73932.189578278717817739L, 58682.029808940540533513L, 85651.942730304900323972L,
	64998.68114389036782086L, 20389.260849767277250066L, 14502.990435889601939125L, 1675.295171764213591814L, 3105.733621764811687171L, 68060.005510002811206505L, 49764.312959632836282253L, 19446.545802377350628376L, 92109.117180907167494297L, 3035.797275466844439507L,
	85586.315570535312872379L, 63842.164317132846917957L, 82959.083758327935356647L, 67851.047864834778010845L, 62615.15830022213049233L, 96323.518974864797199264L, 64969.014295982720796019L, 6917.470404746651183814L, 23789.261272780131548643L, 18274.520478010410442948L,
	36340.528657662827754393L, 65005.178875323850661516L, 22108.406981881591491401L, 43477.301322051673200913L, 58319.492576973396353424L, 28148.974003348266705871L, 8933.276632420602254569L, 38116.790933543117716908L, 80456.906001007999293506L, 80629.567083049187116558L,
	8820.730248270556330681L, 77319.982260742108337581L, 97792.052671048499178141L, 27830.655868846748489887L, 11477.535031267238082364L, 7254.91295486522722058L, 80608.204565706488210708L, 94270.838531771616544574L, 46182.253013898618519306L, 31925.323533969232812524L,
	12694.020297672221204266L, 9897.696773539879359305L, 25264.440263300901278853L, 37785.161099688499234617L, 63865.176465362193994224L, 16327.915233682957477868L, 83168.324391696514794603L, 49845.890664878214011L, 90895.834199104050640017L, 60464.766380126704461873L,
	58913.364436531905084848L, 24043.682337777443153784L, 78871.366389146947767586L, 34139.799982463824562728L, 46979.8093351221177727L, 21971.071649178979016142L, 43900.569502859143540263L, 24706.746194488310720772L, 72175.760773099726066L, 21973.916173007455654442L
	};
	std::vector<long double> int_1000_100000_values_1 = {
	69636.0L, 74768.0L, 8295.0L, 88130.0L, 19688.0L, 35503.0L, 41183.0L, 95959.0L, 3724.0L, 88265.0L,
	1941.0L, 40384.0L, 97715.0L, 62232.0L, 20389.0L, 7733.0L, 11460.0L, 11526.0L, 43981.0L, 28148.0L,
	68763.0L, 7869.0L, 9668.0L, 86737.0L, 57169.0L, 5632.0L, 44033.0L, 36567.0L, 57978.0L, 63806.0L,
	72689.0L, 20380.0L, 3326.0L, 14811.0L, 49764.0L, 23055.0L, 84323.0L, 72159.0L, 84545.0L, 31321.0L,
	22108.0L, 60814.0L, 65548.0L, 53238.0L, 51109.0L, 75591.0L, 1076.0L, 7705.0L, 58451.0L, 29019.0L,
	33261.0L, 2221.0L, 95930.0L, 61615.0L, 81427.0L, 63865.0L, 32306.0L, 17298.0L, 10696.0L, 71500.0L,
	1799.0L, 5395.0L, 58170.0L, 99540.0L, 25969.0L, 4619.0L, 97135.0L, 58682.0L, 64998.0L, 14502.0L,
	3105.0L, 49764.0L, 92109.0L, 85586.0L, 82959.0L, 62615.0L, 64969.0L, 23789.0L, 36340.0L, 22108.0L,
	58319.0L, 8933.0L, 80629.0L, 97792.0L, 11477.0L, 80608.0L, 31925.0L, 9897.0L, 16241.0L, 97412.0L,
	6233.0L, 31696.0L, 14002.0L, 72411.0L, 57488.0L, 99153.0L, 21319.0L, 68535.0L, 9740.0L, 4011.0L,
	9306.0L, 18583.0L, 38166.0L, 56191.0L, 9840.0L, 6468.0L, 83660.0L, 98982.0L, 36056.0L, 9897.0L,
	16668.0L, 9797.0L, 88220.0L, 58494.0L, 6800.0L, 6408.0L, 62230.0L, 48439.0L, 80479.0L, 15309.0L,
	27836.0L, 21971.0L, 15004.0L, 30335.0L, 97711.0L, 89311.0L, 51584.0L, 26916.0L, 90709.0L, 31313.0L,
	3951.0L, 1409.0L, 73062.0L, 15096.0L, 37500.0L, 78696.0L, 16954.0L, 73932.0L, 85651.0L, 20389.0L,
	1675.0L, 68060.0L, 19446.0L, 3035.0L, 63842.0L, 67851.0L, 96323.0L, 6917.0L, 18274.0L, 65005.0L,
	43477.0L, 28148.0L, 38116.0L, 8820.0L, 77319.0L, 27830.0L, 7254.0L, 94270.0L, 46182.0L, 12694.0L,
	25264.0L, 37785.0L, 16327.0L, 49845.0L, 60464.0L, 24043.0L, 34139.0L, 21971.0L, 24706.0L, 21973.0L,
	30335.0L, 75047.0L, 55152.0L, 31696.0L, 14002.0L, 55953.0L, 78696.0L, 16954.0L, 73932.0L, 85651.0L,
	20389.0L, 1675.0L, 68060.0L, 19446.0L, 3035.0L, 63842.0L, 67851.0L, 96323.0L, 6917.0L, 18274.0L,
	65005.0L, 43477.0L, 28148.0L, 38116.0L, 8820.0L, 77319.0L, 27830.0L, 7254.0L, 94270.0L, 46182.0L,
	12694.0L, 25264.0L, 37785.0L, 16327.0L, 49845.0L, 60464.0L, 24043.0L, 34139.0L, 21971.0L, 24706.0L,
	21973.0L, 30335.0L, 75047.0L, 55152.0L, 31696.0L, 14002.0L, 55953.0L, 78696.0L, 16954.0L, 73932.0L,
	85651.0L, 20389.0L, 1675.0L, 68060.0L, 19446.0L, 3035.0L, 63842.0L, 67851.0L, 96323.0L, 6917.0L,
	18274.0L, 65005.0L, 43477.0L, 28148.0L, 38116.0L, 8820.0L, 77319.0L, 27830.0L, 7254.0L, 94270.0L,
	46182.0L, 12694.0L, 25264.0L, 37785.0L, 16327.0L, 49845.0L, 60464.0L, 24043.0L, 34139.0L, 21971.0L,
	24706.0L, 21973.0L, 30335.0L, 75047.0L, 55152.0L, 31696.0L, 14002.0L, 55953.0L, 78696.0L, 16954.0L,
	73932.0L, 85651.0L, 20389.0L, 1675.0L, 68060.0L, 19446.0L, 3035.0L, 63842.0L, 67851.0L, 96323.0L,
	6917.0L, 18274.0L, 65005.0L, 43477.0L, 28148.0L, 38116.0L, 8820.0L, 77319.0L, 27830.0L, 7254.0L,
	94270.0L, 46182.0L, 12694.0L, 25264.0L, 37785.0L, 16327.0L, 49845.0L, 60464.0L, 24043.0L, 34139.0L,
	21971.0L, 24706.0L, 21973.0L, 30335.0L, 75047.0L, 55152.0L, 31696.0L, 14002.0L, 55953.0L, 25969.0L,
	78696.0L, 4619.0L, 16954.0L, 97135.0L, 73932.0L, 58682.0L, 85651.0L, 64998.0L, 20389.0L, 14502.0L,
	1675.0L, 3105.0L, 68060.0L, 49764.0L, 19446.0L, 92109.0L, 3035.0L, 85586.0L, 63842.0L, 82959.0L
	};

	std::vector<long double> int_1000_100000_values_2 = {
	64010.0L, 20608.0L, 88057.0L, 97136.0L, 43232.0L, 85652.0L, 77103.0L, 47443.0L, 42930.0L, 8820.0L,
	76974.0L, 75591.0L, 66345.0L, 21971.0L, 40384.0L, 83660.0L, 57978.0L, 80479.0L, 81427.0L, 90709.0L,
	31313.0L, 1409.0L, 25969.0L, 16954.0L, 58682.0L, 64998.0L, 20389.0L, 19446.0L, 63842.0L, 67851.0L,
	96323.0L, 23789.0L, 65005.0L, 58319.0L, 8933.0L, 80629.0L, 77319.0L, 11477.0L, 80608.0L, 46182.0L,
	12694.0L, 25264.0L, 43981.0L, 28148.0L, 68763.0L, 7869.0L, 9668.0L, 86737.0L, 57169.0L, 5632.0L,
	44033.0L, 36567.0L, 57978.0L, 63806.0L, 72689.0L, 20380.0L, 3326.0L, 14811.0L, 49764.0L, 23055.0L,
	84323.0L, 72159.0L, 84545.0L, 31321.0L, 22108.0L, 60814.0L, 65548.0L, 53238.0L, 51109.0L, 75591.0L,
	1076.0L, 7705.0L, 58451.0L, 29019.0L, 33261.0L, 2221.0L, 95930.0L, 61615.0L, 81427.0L, 63865.0L,
	32306.0L, 17298.0L, 10696.0L, 71500.0L, 1799.0L, 5395.0L, 58170.0L, 99540.0L, 25969.0L, 4619.0L,
	97135.0L, 58682.0L, 64998.0L, 14502.0L, 3105.0L, 49764.0L, 92109.0L, 85586.0L, 82959.0L, 62615.0L,
	64969.0L, 23789.0L, 36340.0L, 22108.0L, 58319.0L, 8933.0L, 80629.0L, 97792.0L, 11477.0L, 80608.0L,
	31925.0L, 9897.0L, 16241.0L, 97412.0L, 6233.0L, 31696.0L, 14002.0L, 72411.0L, 57488.0L, 99153.0L,
	21319.0L, 68535.0L, 9740.0L, 4011.0L, 9306.0L, 18583.0L, 38166.0L, 56191.0L, 9840.0L, 6468.0L,
	83660.0L, 98982.0L, 36056.0L, 9897.0L, 16668.0L, 9797.0L, 88220.0L, 58494.0L, 6800.0L, 6408.0L,
	62230.0L, 48439.0L, 80479.0L, 15309.0L, 27836.0L, 21971.0L, 15004.0L, 30335.0L, 97711.0L, 89311.0L,
	51584.0L, 26916.0L, 90709.0L, 31313.0L, 3951.0L, 1409.0L, 73062.0L, 15096.0L, 37500.0L, 78696.0L,
	16954.0L, 73932.0L, 85651.0L, 20389.0L, 1675.0L, 68060.0L, 19446.0L, 3035.0L, 63842.0L, 67851.0L,
	96323.0L, 6917.0L, 18274.0L, 65005.0L, 43477.0L, 28148.0L, 38116.0L, 8820.0L, 77319.0L, 27830.0L,
	7254.0L, 94270.0L, 46182.0L, 12694.0L, 25264.0L, 37785.0L, 16327.0L, 49845.0L, 60464.0L, 24043.0L,
	34139.0L, 21971.0L, 24706.0L, 21973.0L, 30335.0L, 75047.0L, 55152.0L, 31696.0L, 14002.0L, 55953.0L,
	78696.0L, 16954.0L, 73932.0L, 85651.0L, 20389.0L, 1675.0L, 68060.0L, 19446.0L, 3035.0L, 63842.0L,
	67851.0L, 96323.0L, 6917.0L, 18274.0L, 65005.0L, 43477.0L, 28148.0L, 38116.0L, 8820.0L, 77319.0L,
	27830.0L, 7254.0L, 94270.0L, 46182.0L, 12694.0L, 25264.0L, 37785.0L, 16327.0L, 49845.0L, 60464.0L,
	24043.0L, 34139.0L, 21971.0L, 24706.0L, 21973.0L, 30335.0L, 75047.0L, 55152.0L, 31696.0L, 14002.0L,
	55953.0L, 78696.0L, 16954.0L, 73932.0L, 85651.0L, 20389.0L, 1675.0L, 68060.0L, 19446.0L, 3035.0L,
	63842.0L, 67851.0L, 96323.0L, 6917.0L, 18274.0L, 65005.0L, 43477.0L, 28148.0L, 38116.0L, 8820.0L,
	77319.0L, 27830.0L, 7254.0L, 94270.0L, 46182.0L, 12694.0L, 25264.0L, 37785.0L, 16327.0L, 49845.0L,
	60464.0L, 24043.0L, 34139.0L, 21971.0L, 24706.0L, 21973.0L, 30335.0L, 75047.0L, 55152.0L, 31696.0L,
	14002.0L, 55953.0L, 78696.0L, 16954.0L, 73932.0L, 85651.0L, 20389.0L, 1675.0L, 68060.0L, 19446.0L,
	3035.0L, 63842.0L, 67851.0L, 96323.0L, 6917.0L, 18274.0L, 65005.0L, 43477.0L, 28148.0L, 38116.0L,
	8820.0L, 77319.0L, 27830.0L, 7254.0L, 94270.0L, 46182.0L, 12694.0L, 25264.0L, 37785.0L, 16327.0L,
	49845.0L, 60464.0L, 24043.0L, 34139.0L, 21971.0L, 24706.0L, 21973.0L, 30335.0L, 75047.0L, 55152.0L
	};

	std::vector<long double> int_0_1000_values_1 = { 
	861.0L, 706.0L, 114.0L, 56.0L, 198.0L, 345.0L, 467.0L, 258.0L, 975.0L, 829.0L,
	542.0L, 275.0L, 881.0L, 747.0L, 903.0L, 196.0L, 355.0L, 411.0L, 959.0L, 37.0L,
	882.0L, 194.0L, 403.0L, 977.0L, 622.0L, 203.0L, 77.0L, 114.0L, 115.0L, 439.0L,
	281.0L, 687.0L, 78.0L, 96.0L, 867.0L, 571.0L, 56.0L, 440.0L, 365.0L, 579.0L,
	638.0L, 726.0L, 203.0L, 33.0L, 148.0L, 497.0L, 230.0L, 843.0L, 721.0L, 845.0L,
	313.0L, 221.0L, 608.0L, 655.0L, 532.0L, 511.0L, 755.0L, 10.0L, 77.0L, 584.0L,
	290.0L, 332.0L, 22.0L, 959.0L, 616.0L, 814.0L, 638.0L, 323.0L, 172.0L, 106.0L,
	715.0L, 17.0L, 53.0L, 581.0L, 995.0L, 259.0L, 46.0L, 971.0L, 586.0L, 649.0L,
	145.0L, 31.0L, 497.0L, 921.0L, 855.0L, 829.0L, 626.0L, 649.0L, 237.0L, 363.0L,
	221.0L, 583.0L, 89.0L, 806.0L, 977.0L, 114.0L, 806.0L, 319.0L, 98.0L, 162.0L,
	974.0L, 62.0L, 316.0L, 140.0L, 724.0L, 574.0L, 991.0L, 213.0L, 685.0L, 97.0L,
	40.0L, 93.0L, 185.0L, 381.0L, 561.0L, 98.0L, 64.0L, 836.0L, 989.0L, 360.0L,
	98.0L, 166.0L, 97.0L, 882.0L, 584.0L, 68.0L, 64.0L, 622.0L, 484.0L, 804.0L,
	153.0L, 278.0L, 219.0L, 150.0L, 303.0L, 977.0L, 893.0L, 515.0L, 269.0L, 907.0L,
	313.0L, 39.0L, 14.0L, 730.0L, 150.0L, 375.0L, 786.0L, 169.0L, 739.0L, 856.0L,
	203.0L, 16.0L, 680.0L, 194.0L, 30.0L, 638.0L, 678.0L, 963.0L, 69.0L, 182.0L,
	650.0L, 434.0L, 281.0L, 381.0L, 88.0L, 773.0L, 278.0L, 72.0L, 942.0L, 461.0L,
	126.0L, 252.0L, 377.0L, 163.0L, 498.0L, 604.0L, 240.0L, 341.0L, 219.0L, 247.0L,
	219.0L, 303.0L, 750.0L, 551.0L, 316.0L, 140.0L, 559.0L, 786.0L, 169.0L, 739.0L,
	856.0L, 203.0L, 16.0L, 680.0L, 194.0L, 30.0L, 638.0L, 678.0L, 963.0L, 69.0L,
	182.0L, 650.0L, 434.0L, 281.0L, 381.0L, 88.0L, 773.0L, 278.0L, 72.0L, 942.0L,
	461.0L, 126.0L, 252.0L, 377.0L, 163.0L, 498.0L, 604.0L, 240.0L, 341.0L, 219.0L,
	247.0L, 219.0L, 303.0L, 750.0L, 551.0L, 316.0L, 140.0L, 559.0L, 786.0L, 169.0L,
	739.0L, 856.0L, 203.0L, 16.0L, 680.0L, 194.0L, 30.0L, 638.0L, 678.0L, 963.0L,
	69.0L, 182.0L, 650.0L, 434.0L, 281.0L, 381.0L, 88.0L, 773.0L, 278.0L, 72.0L,
	942.0L, 461.0L, 126.0L, 252.0L, 377.0L, 163.0L, 498.0L, 604.0L, 240.0L, 341.0L,
	219.0L, 247.0L, 219.0L, 303.0L, 750.0L, 551.0L, 316.0L, 140.0L, 559.0L, 786.0L,
	169.0L, 739.0L, 856.0L, 203.0L, 16.0L, 680.0L, 194.0L, 30.0L, 638.0L, 678.0L,
	963.0L, 69.0L, 182.0L, 650.0L, 434.0L, 281.0L, 381.0L, 88.0L, 773.0L, 278.0L,
	72.0L, 942.0L, 461.0L, 126.0L, 252.0L, 377.0L, 163.0L, 498.0L, 604.0L, 240.0L,
	341.0L, 219.0L, 247.0L, 219.0L, 303.0L, 750.0L, 551.0L, 316.0L, 140.0L, 559.0L,
	786.0L, 169.0L, 739.0L, 856.0L, 203.0L, 16.0L, 680.0L, 194.0L, 30.0L, 638.0L
	};

	std::vector<long double> int_0_1000_values_2 = { 
	818.0L, 192.0L, 77.0L, 532.0L, 353.0L, 743.0L, 477.0L, 829.0L, 68.0L, 959.0L,
	345.0L, 715.0L, 90.0L, 881.0L, 663.0L, 734.0L, 74.0L, 203.0L, 41.0L, 693.0L,
	574.0L, 115.0L, 958.0L, 269.0L, 608.0L, 974.0L, 623.0L, 316.0L, 140.0L, 724.0L,
	574.0L, 991.0L, 213.0L, 685.0L, 97.0L, 40.0L, 93.0L, 185.0L, 381.0L, 561.0L,
	98.0L, 64.0L, 836.0L, 989.0L, 360.0L, 98.0L, 166.0L, 97.0L, 882.0L, 584.0L,
	68.0L, 64.0L, 622.0L, 484.0L, 804.0L, 153.0L, 278.0L, 219.0L, 150.0L, 303.0L,
	977.0L, 893.0L, 515.0L, 269.0L, 907.0L, 313.0L, 39.0L, 14.0L, 730.0L, 150.0L,
	375.0L, 786.0L, 169.0L, 739.0L, 856.0L, 203.0L, 16.0L, 680.0L, 194.0L, 30.0L,
	638.0L, 678.0L, 963.0L, 69.0L, 182.0L, 650.0L, 434.0L, 281.0L, 381.0L, 88.0L,
	773.0L, 278.0L, 72.0L, 942.0L, 461.0L, 126.0L, 252.0L, 377.0L, 163.0L, 498.0L,
	604.0L, 240.0L, 341.0L, 219.0L, 247.0L, 219.0L, 303.0L, 750.0L, 551.0L, 316.0L,
	140.0L, 559.0L, 786.0L, 169.0L, 739.0L, 856.0L, 203.0L, 16.0L, 680.0L, 194.0L,
	30.0L, 638.0L, 678.0L, 963.0L, 69.0L, 182.0L, 650.0L, 434.0L, 281.0L, 381.0L,
	88.0L, 773.0L, 278.0L, 72.0L, 942.0L, 461.0L, 126.0L, 252.0L, 377.0L, 163.0L,
	498.0L, 604.0L, 240.0L, 341.0L, 219.0L, 247.0L, 219.0L, 303.0L, 750.0L, 551.0L,
	316.0L, 140.0L, 559.0L, 786.0L, 169.0L, 739.0L, 856.0L, 203.0L, 16.0L, 680.0L,
	194.0L, 30.0L, 638.0L, 678.0L, 963.0L, 69.0L, 182.0L, 650.0L, 434.0L, 281.0L,
	381.0L, 88.0L, 773.0L, 278.0L, 72.0L, 942.0L, 461.0L, 126.0L, 252.0L, 377.0L,
	163.0L, 498.0L, 604.0L, 240.0L, 341.0L, 219.0L, 247.0L, 219.0L, 303.0L, 750.0L,
	551.0L, 316.0L, 140.0L, 559.0L, 786.0L, 169.0L, 739.0L, 856.0L, 203.0L, 16.0L,
	680.0L, 194.0L, 30.0L, 638.0L, 678.0L, 963.0L, 69.0L, 182.0L, 650.0L, 434.0L,
	281.0L, 381.0L, 88.0L, 773.0L, 278.0L, 72.0L, 942.0L, 461.0L, 126.0L, 252.0L,
	377.0L, 163.0L, 498.0L, 604.0L, 240.0L, 341.0L, 219.0L, 247.0L, 219.0L, 303.0L,
	750.0L, 551.0L, 316.0L, 140.0L, 559.0L, 786.0L, 169.0L, 739.0L, 856.0L, 203.0L,
	16.0L, 680.0L, 194.0L, 30.0L, 638.0L, 678.0L, 963.0L, 69.0L, 182.0L, 650.0L,
	434.0L, 281.0L, 381.0L, 88.0L, 773.0L, 278.0L, 72.0L, 942.0L, 461.0L, 126.0L,
	252.0L, 377.0L, 163.0L, 498.0L, 604.0L, 240.0L, 341.0L, 219.0L, 247.0L, 219.0L,
	303.0L, 750.0L, 551.0L, 316.0L, 140.0L, 559.0L, 786.0L, 169.0L, 739.0L, 856.0L,
	203.0L, 16.0L, 680.0L, 194.0L, 30.0L, 638.0L, 678.0L, 963.0L, 69.0L, 182.0L,
	650.0L, 434.0L, 281.0L, 381.0L, 88.0L, 773.0L, 278.0L, 72.0L, 942.0L, 461.0L,
	126.0L, 252.0L, 377.0L, 163.0L, 498.0L, 604.0L, 240.0L, 341.0L, 219.0L, 247.0L,
	219.0L, 303.0L, 750.0L, 551.0L, 316.0L, 140.0L, 559.0L, 786.0L, 169.0L, 739.0L
	};

	std::vector<long double> ld_1_1000_values_1 = {
	634.50932789118029L, 113.33626810237706L, 342.28614619451109L, 663.11192534887290L, 936.33250106990497L, 778.84223842602398L, 810.75645700201625L, 98.97100539151521L,
	196.88397086884826L, 341.39799982463825L, 469.79809335122118L, 219.71071649178979L, 439.00569502859144L, 247.06746194488311L, 721.75760773099726L, 219.73916173007456L,
	959.30563223075296L, 303.35787498717837L, 616.15110515152512L, 750.47882110293023L, 78.92298246734135L, 551.52091171809006L, 46.12441113063542L, 316.96883393963217L,
	78.69011854199693L, 140.02348639209755L, 355.03955416027573L, 559.53518602492986L, 259.69837837930827L, 786.96657564756548L, 46.19467812030081L, 169.54912384784227L,
	971.35250567086885L, 739.32189578278718L, 586.82029808940541L, 856.51942730304900L, 649.98681143890368L, 203.89260849767277L, 145.02990435889602L, 16.75295171764214L,
	31.05733621764812L, 680.60005510002811L, 497.64312959632836L, 194.46545802377351L, 921.09117180907167L, 30.35797275466844L, 855.86315570535313L, 638.42164317132847L,
	829.59083758327935L, 678.51047864834778L, 626.15158300222130L, 963.23518974864797L, 649.69014295982721L, 69.17470404746651L, 237.89261272780132L, 182.74520478010410L,
	363.40528657662828L, 650.05178875323851L, 221.08406981881591L, 434.77301322051673L, 583.19492576973396L, 281.48974003348267L, 89.33276632420602L, 806.29567083049187L,
	773.19982260742108L, 977.92052671048499L, 278.30655868846748L, 114.77535031267238L, 806.08204565706488L, 942.70838531771617L, 461.82253013898619L, 126.94020297672221L,
	252.64440263300901L, 162.41464157125331L, 439.81670233075274L, 281.48174826569622L, 687.63535817215336L, 78.69011854199693L, 96.68232147321687L, 867.37781685317750L,
	571.69870230303031L, 56.32783103138849L, 365.67112952864729L, 97.40063261208066L, 638.06969185124675L, 726.89659972322320L, 33.26273030806449L, 148.11233519894769L,
	230.55733591469005L, 843.23084895089269L, 721.59956743958930L, 313.21493920959882L, 221.08665975005933L, 608.14717140880006L, 532.38169123869215L, 511.09111822557141L,
	10.76678438311355L, 77.05511874288088L, 290.19264264779427L, 332.61265273398982L, 22.21722510006279L, 616.15110515152512L, 638.65176465362194L, 172.98710787265853L,
	715.00914041164971L, 53.95780133486027L, 995.40380230232491L, 46.19467812030081L, 739.32189578278718L, 145.02990435889602L, 497.64312959632836L, 855.86315570535313L,
	626.15158300222130L, 237.89261272780132L, 221.08406981881591L, 89.33276632420602L, 977.92052671048499L, 806.08204565706488L, 98.97696773539879L, 974.12358243405761L,
	316.96883393963217L, 724.11096956241352L, 991.53111867169267L, 685.35839886470640L, 40.11660144576337L, 185.83565860492818L, 561.91085621870676L, 64.68212711041910L,
	989.82527376044774L, 98.97100539151521L, 97.97319765275053L, 584.94750849174161L, 64.08067160759005L, 484.39066487802425L, 153.09839848520845L, 219.71071649178979L,
	303.35787498717837L, 893.11968233480118L, 269.16964958178665L, 313.13257545686036L, 14.09288012670266L, 150.96096765750844L, 786.96657564756548L, 971.35250567086885L,
	649.98681143890368L, 16.75295171764214L, 921.09117180907167L, 829.59083758327935L, 649.69014295982721L, 363.40528657662828L, 583.19492576973396L, 806.29567083049187L,
	114.77535031267238L, 319.25323533969233L, 162.41464157125331L, 62.33159392271889L, 140.02348639209755L, 574.88740871926653L, 213.19957683101529L, 97.40063261208066L,
	93.06326233157539L, 381.66425141065876L, 98.40400508115680L, 836.60106883260421L, 360.56223842602398L, 166.68618698188278L, 882.20013583204913L, 68.00743126868212L,
	622.30137837835005L, 804.79549242940848L, 278.36815340626345L, 150.04148119106045L, 977.11164391694998L, 515.84184333679237L, 907.09688320493820L, 39.51728952402947L,
	730.62245239276963L, 375.00518602492986L, 169.54912384784227L, 856.51942730304900L, 31.05733621764812L, 30.35797275466844L, 678.51047864834778L, 69.17470404746651L,
	650.05178875323851L, 281.48974003348267L, 773.19982260742108L, 72.54912954865227L, 461.82253013898619L, 252.64440263300901L, 163.27915233682957L, 604.64766380126704L,
	341.39799982463825L, 247.06746194488311L, 303.35787498717837L, 78.92298246734135L, 316.96883393963217L, 355.03955416027573L, 786.96657564756548L, 739.32189578278718L,
	203.89260849767277L, 680.60005510002811L, 638.42164317132847L, 182.74520478010410L, 434.77301322051673L, 88.20730248270556L, 942.70838531771617L, 377.85161099688499L,
	908.95834199104051L, 788.71366389146948L, 439.00569502859144L, 959.30563223075296L, 46.12441113063542L, 559.53518602492986L, 46.19467812030081L, 586.82029808940541L,
	16.75295171764214L, 194.46545802377351L, 829.59083758327935L, 963.23518974864797L, 221.08406981881591L, 381.16790933543118L, 278.30655868846748L, 461.82253013898619L,
	831.68324391696515L, 589.13364436531905L, 721.75760773099726L, 616.15110515152512L, 78.69011854199693L, 259.69837837930827L, 169.54912384784227L, 649.98681143890368L,
	31.05733621764812L, 30.35797275466844L, 626.15158300222130L, 363.40528657662828L, 806.29567083049187L, 72.54912954865227L, 126.94020297672221L, 498.45890664878214L,
	240.43682337777443L, 469.79809335122118L, 750.47882110293023L, 140.02348639209755L, 46.19467812030081L, 971.35250567086885L, 145.02990435889602L, 921.09117180907167L,
	678.51047864834778L, 69.17470404746651L, 583.19492576973396L, 773.19982260742108L, 319.25323533969233L, 377.85161099688499L, 604.64766380126704L, 219.71071649178979L,
	78.92298246734135L, 559.53518602492986L, 739.32189578278718L, 203.89260849767277L, 194.46545802377351L, 829.59083758327935L, 182.74520478010410L, 88.20730248270556L,
	126.94020297672221L, 831.68324391696515L, 788.71366389146948L, 439.00569502859144L, 750.47882110293023L, 140.02348639209755L, 971.35250567086885L, 145.02990435889602L,
	678.51047864834778L, 69.17470404746651L, 773.19982260742108L, 319.25323533969233L, 831.68324391696515L, 788.71366389146948L, 750.47882110293023L, 140.02348639209755L
	};

	std::vector<long double> ld_1_1000_values_2 = {
	818.18956983796539L, 192.35824340576073L, 77.53874987178366L, 532.89861851930618L, 353.48639209754765L, 743.12670265743455L, 477.10787265852559L, 829.32439169651479L,
	68.91404116497142L, 959.08375832793536L, 345.98976967735399L, 715.76077309972607L, 90.95768310152926L, 881.33939632168040L, 663.45657064882107L, 734.58023773506284L,
	74.61944883107208L, 203.88482642173767L, 41.11306354170665L, 693.35122117772700L, 574.43653190508485L, 115.26848395355046L, 958.56322307529626L, 269.75466844439507L,
	608.43540263300901L, 974.13891469477676L, 623.32439169651480L, 316.96923281252384L, 140.02211029302329L, 724.12384784227469L, 574.88753238506615L, 991.53111867169267L,
	213.19957683101529L, 685.35839886470640L, 97.40063261208066L, 40.11660144576337L, 93.06326233157539L, 185.83565860492818L, 381.66425141065876L, 561.91085621870676L,
	98.40400508115680L, 64.68212711041910L, 836.60106883260421L, 989.82527376044774L, 360.56223842602398L, 98.97100539151521L, 166.68618698188278L, 97.97319765275053L,
	882.20013583204913L, 584.94750849174161L, 68.00743126868212L, 64.08067160759005L, 622.30137837835005L, 484.39066487802425L, 804.79549242940848L, 153.09839848520845L,
	278.36815340626345L, 219.71071649178979L, 150.04148119106045L, 303.35787498717837L, 977.11164391694998L, 893.11968233480118L, 515.84184333679237L, 269.16964958178665L,
	907.09688320493820L, 313.13257545686036L, 39.51728952402947L, 14.09288012670266L, 730.62245239276963L, 150.96096765750844L, 375.00518602492986L, 786.96657564756548L,
	169.54912384784227L, 739.32189578278718L, 856.51942730304900L, 203.89260849767277L, 16.75295171764214L, 680.60005510002811L, 194.46545802377351L, 30.35797275466844L,
	638.42164317132847L, 678.51047864834778L, 963.23518974864797L, 69.17470404746651L, 182.74520478010410L, 650.05178875323851L, 434.77301322051673L, 281.48974003348267L,
	381.16790933543118L, 88.20730248270556L, 773.19982260742108L, 278.30655868846748L, 72.54912954865227L, 942.70838531771617L, 461.82253013898619L, 126.94020297672221L,
	252.64440263300901L, 377.85161099688499L, 163.27915233682957L, 498.45890664878214L, 604.64766380126704L, 240.43682337777443L, 341.39799982463825L, 219.71071649178979L,
	247.06746194488311L, 219.73916173007456L, 303.35787498717837L, 750.47882110293023L, 551.52091171809006L, 316.96883393963217L, 140.02348639209755L, 559.53518602492986L,
	786.96657564756548L, 169.54912384784227L, 739.32189578278718L, 856.51942730304900L, 203.89260849767277L, 16.75295171764214L, 680.60005510002811L, 194.46545802377351L,
	30.35797275466844L, 638.42164317132847L, 678.51047864834778L, 963.23518974864797L, 69.17470404746651L, 182.74520478010410L, 650.05178875323851L, 434.77301322051673L,
	281.48974003348267L, 381.16790933543118L, 88.20730248270556L, 773.19982260742108L, 278.30655868846748L, 72.54912954865227L, 942.70838531771617L, 461.82253013898619L,
	126.94020297672221L, 252.64440263300901L, 377.85161099688499L, 163.27915233682957L, 498.45890664878214L, 604.64766380126704L, 240.43682337777443L, 341.39799982463825L,
	219.71071649178979L, 247.06746194488311L, 219.73916173007456L, 303.35787498717837L, 750.47882110293023L, 551.52091171809006L, 316.96883393963217L, 140.02348639209755L,
	559.53518602492986L, 786.96657564756548L, 169.54912384784227L, 739.32189578278718L, 856.51942730304900L, 203.89260849767277L, 16.75295171764214L, 680.60005510002811L,
	194.46545802377351L, 30.35797275466844L, 638.42164317132847L, 678.51047864834778L, 963.23518974864797L, 69.17470404746651L, 182.74520478010410L, 650.05178875323851L,
	434.77301322051673L, 281.48974003348267L, 381.16790933543118L, 88.20730248270556L, 773.19982260742108L, 278.30655868846748L, 72.54912954865227L, 942.70838531771617L,
	461.82253013898619L, 126.94020297672221L, 252.64440263300901L, 377.85161099688499L, 163.27915233682957L, 498.45890664878214L, 604.64766380126704L, 240.43682337777443L,
	341.39799982463825L, 219.71071649178979L, 247.06746194488311L, 219.73916173007456L, 303.35787498717837L, 750.47882110293023L, 551.52091171809006L, 316.96883393963217L,
	140.02348639209755L, 559.53518602492986L, 786.96657564756548L, 169.54912384784227L, 739.32189578278718L, 856.51942730304900L, 203.89260849767277L, 16.75295171764214L,
	680.60005510002811L, 194.46545802377351L, 30.35797275466844L, 638.42164317132847L, 678.51047864834778L, 963.23518974864797L, 69.17470404746651L, 182.74520478010410L,
	650.05178875323851L, 434.77301322051673L, 281.48974003348267L, 381.16790933543118L, 88.20730248270556L, 773.19982260742108L, 278.30655868846748L, 72.54912954865227L,
	942.70838531771617L, 461.82253013898619L, 126.94020297672221L, 252.64440263300901L, 377.85161099688499L, 163.27915233682957L, 498.45890664878214L, 604.64766380126704L,
	341.39799982463825L, 219.71071649178979L, 247.06746194488311L, 219.73916173007456L, 303.35787498717837L, 750.47882110293023L, 551.52091171809006L, 316.96883393963217L
	};

	std::vector<long double> ld_0_1_values_1 = {
	0.6963612345678901L, 0.7476898765432109L, 0.0829512345678901L, 0.8813098765432109L, 0.1968812345678901L, 0.3550398765432109L, 0.4118312345678901L, 0.9595998765432109L,
	0.0194112345678901L, 0.4038498765432109L, 0.9771512345678901L, 0.6223298765432109L, 0.2038912345678901L, 0.0773398765432109L, 0.1146012345678901L, 0.1152698765432109L,
	0.6876312345678901L, 0.0786998765432109L, 0.0966812345678901L, 0.8673798765432109L, 0.5716912345678901L, 0.0563298765432109L, 0.4403312345678901L, 0.3656798765432109L,
	0.7268912345678901L, 0.2038098765432109L, 0.0332612345678901L, 0.1481198765432109L, 0.4976412345678901L, 0.2305598765432109L, 0.8432312345678901L, 0.7215998765432109L,
	0.8454512345678901L, 0.3132198765432109L, 0.2210812345678901L, 0.6081498765432109L, 0.6554812345678901L, 0.5323898765432109L, 0.5110912345678901L, 0.7559198765432109L,
	0.0107612345678901L, 0.0770598765432109L, 0.5845112345678901L, 0.2901998765432109L, 0.3326112345678901L, 0.0222198765432109L, 0.9593012345678901L, 0.6161598765432109L,
	0.8142712345678901L, 0.6386598765432109L, 0.3230612345678901L, 0.1729898765432109L, 0.1069612345678901L, 0.7150098765432109L, 0.0179912345678901L, 0.0539598765432109L,
	0.5817012345678901L, 0.9954098765432109L, 0.2596912345678901L, 0.0461998765432109L, 0.9713512345678901L, 0.5868298765432109L, 0.6499812345678901L, 0.1450298765432109L,
	0.0310512345678901L, 0.4976498765432109L, 0.9210912345678901L, 0.8558698765432109L, 0.8295912345678901L, 0.6261598765432109L, 0.6496912345678901L, 0.2378998765432109L,
	0.3634012345678901L, 0.2210898765432109L, 0.5831912345678901L, 0.0893398765432109L, 0.8062912345678901L, 0.9779298765432109L, 0.1147712345678901L, 0.8060898765432109L,
	0.3192512345678901L, 0.0989798765432109L, 0.1624112345678901L, 0.9741298765432109L, 0.0623312345678901L, 0.3169698765432109L, 0.1400212345678901L, 0.7241198765432109L,
	0.5748812345678901L, 0.9915398765432109L, 0.2131912345678901L, 0.6853598765432109L, 0.0974012345678901L, 0.0401198765432109L, 0.0930612345678901L, 0.1858398765432109L,
	0.3816612345678901L, 0.5619198765432109L, 0.0984012345678901L, 0.0646898765432109L, 0.8366012345678901L, 0.9898298765432109L, 0.3605612345678901L, 0.0989798765432109L,
	0.1666812345678901L, 0.0979798765432109L, 0.8822012345678901L, 0.5849498765432109L, 0.0680012345678901L, 0.0640898765432109L, 0.6223012345678901L, 0.4843998765432109L,
	0.8047912345678901L, 0.1530998765432109L, 0.2783612345678901L, 0.2197198765432109L, 0.1500412345678901L, 0.3033598765432109L, 0.9771112345678901L, 0.8931198765432109L,
	0.5158412345678901L, 0.2691698765432109L, 0.9070912345678901L, 0.3131398765432109L, 0.0395112345678901L, 0.0140998765432109L, 0.7306212345678901L, 0.1509698765432109L,
	0.3750012345678901L, 0.7869698765432109L, 0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L, 0.0167512345678901L, 0.6806098765432109L,
	0.1944612345678901L, 0.0303598765432109L, 0.6384212345678901L, 0.6785198765432109L, 0.9632312345678901L, 0.0691798765432109L, 0.1827412345678901L, 0.6500598765432109L,
	0.4347712345678901L, 0.2814898765432109L, 0.3811612345678901L, 0.0882098765432109L, 0.7731912345678901L, 0.2783098765432109L, 0.0725412345678901L, 0.9427098765432109L,
	0.4618212345678901L, 0.1269498765432109L, 0.2526412345678901L, 0.3778598765432109L, 0.1632712345678901L, 0.4984598765432109L, 0.6046412345678901L, 0.2404398765432109L,
	0.3413912345678901L, 0.2197198765432109L, 0.2470612345678901L, 0.2197398765432109L, 0.3033512345678901L, 0.7504798765432109L, 0.5515212345678901L, 0.3169698765432109L,
	0.1400212345678901L, 0.5595398765432109L, 0.7869612345678901L, 0.1695498765432109L, 0.7393212345678901L, 0.8565198765432109L, 0.2038912345678901L, 0.0167598765432109L,
	0.6806012345678901L, 0.1944698765432109L, 0.0303512345678901L, 0.6384298765432109L, 0.6785112345678901L, 0.9632398765432109L, 0.0691712345678901L, 0.1827498765432109L,
	0.6500512345678901L, 0.4347798765432109L, 0.2814812345678901L, 0.3811698765432109L, 0.0882012345678901L, 0.7731998765432109L, 0.2783012345678901L, 0.0725498765432109L,
	0.9427012345678901L, 0.4618298765432109L, 0.1269412345678901L, 0.2526498765432109L, 0.3778512345678901L, 0.1632798765432109L, 0.4984512345678901L, 0.6046498765432109L,
	0.2404312345678901L, 0.3413998765432109L, 0.2197112345678901L, 0.2470698765432109L, 0.2197312345678901L, 0.3033598765432109L, 0.7504712345678901L, 0.5515298765432109L,
	0.3169612345678901L, 0.1400298765432109L, 0.5595312345678901L, 0.7869698765432109L, 0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L,
	0.0167512345678901L, 0.6806098765432109L, 0.1944612345678901L, 0.0303598765432109L, 0.6384212345678901L, 0.6785198765432109L, 0.9632312345678901L, 0.0691798765432109L,
	0.1827412345678901L, 0.6500598765432109L, 0.4347712345678901L, 0.2814898765432109L, 0.3811612345678901L, 0.0882098765432109L, 0.7731912345678901L, 0.2783098765432109L,
	0.0725412345678901L, 0.9427098765432109L, 0.4618212345678901L, 0.1269498765432109L, 0.2526412345678901L, 0.3778598765432109L, 0.1632712345678901L, 0.4984598765432109L,
	0.5595312345678901L, 0.7869698765432109L, 0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L, 0.0167512345678901L, 0.6806098765432109L,
	0.1944612345678901L, 0.0303598765432109L, 0.6384212345678901L, 0.6785198765432109L, 0.9632312345678901L, 0.0691798765432109L, 0.1827412345678901L, 0.6500598765432109L,
	0.4347712345678901L, 0.2814898765432109L, 0.3811612345678901L, 0.0882098765432109L, 0.7731912345678901L, 0.2783098765432109L, 0.0725412345678901L, 0.9427098765432109L,
	0.4618212345678901L, 0.1269498765432109L, 0.2526412345678901L, 0.3778598765432109L, 0.1632712345678901L, 0.4984598765432109L, 0.6046412345678901L, 0.2404398765432109L,
	0.3413912345678901L, 0.2197198765432109L, 0.2470612345678901L, 0.2197398765432109L, 0.3033512345678901L, 0.7504798765432109L, 0.5515212345678901L, 0.3169698765432109L,
	0.2596912345678901L, 0.0461998765432109L, 0.9713512345678901L, 0.5868298765432109L, 0.6499812345678901L, 0.1450298765432109L, 0.0310512345678901L, 0.4976498765432109L,
	0.9210912345678901L, 0.8558698765432109L, 0.8295912345678901L, 0.6261598765432109L, 0.6496912345678901L, 0.2378998765432109L, 0.3634012345678901L, 0.2210898765432109L,
	0.5831912345678901L, 0.0893398765432109L, 0.8062912345678901L, 0.9779298765432109L, 0.1147712345678901L, 0.8060898765432109L, 0.3192512345678901L, 0.0989798765432109L,
	0.1624112345678901L, 0.9741298765432109L, 0.0623312345678901L, 0.3169698765432109L, 0.1400212345678901L, 0.7241198765432109L, 0.5748812345678901L, 0.9915398765432109L,
	0.2131912345678901L, 0.6853598765432109L, 0.0974012345678901L, 0.0401198765432109L, 0.0930612345678901L, 0.1858398765432109L, 0.3816612345678901L, 0.5619198765432109L
	};

	std::vector<long double> ld_0_1_values_2 = {
	0.6046412345678901L, 0.2404398765432109L, 0.3413912345678901L, 0.2197198765432109L, 0.2470612345678901L, 0.2197398765432109L, 0.3033512345678901L, 0.7504798765432109L,
	0.5515212345678901L, 0.3169698765432109L, 0.1400212345678901L, 0.5595398765432109L, 0.7869612345678901L, 0.1695498765432109L, 0.7393212345678901L, 0.8565198765432109L,
	0.2038912345678901L, 0.0167598765432109L, 0.6806012345678901L, 0.1944698765432109L, 0.0303512345678901L, 0.6384298765432109L, 0.6785112345678901L, 0.9632398765432109L,
	0.0691712345678901L, 0.1827498765432109L, 0.6500512345678901L, 0.4347798765432109L, 0.2814812345678901L, 0.3811698765432109L, 0.0882012345678901L, 0.7731998765432109L,
	0.2783012345678901L, 0.0725498765432109L, 0.9427012345678901L, 0.4618298765432109L, 0.1269412345678901L, 0.2526498765432109L, 0.3778512345678901L, 0.1632798765432109L,
	0.4984512345678901L, 0.6046498765432109L, 0.2404312345678901L, 0.3413998765432109L, 0.2197112345678901L, 0.2470698765432109L, 0.2197312345678901L, 0.3033598765432109L,
	0.7504712345678901L, 0.5515298765432109L, 0.3169612345678901L, 0.1400298765432109L, 0.5595312345678901L, 0.7869698765432109L, 0.1695412345678901L, 0.7393298765432109L,
	0.8565112345678901L, 0.2038998765432109L, 0.0167512345678901L, 0.6806098765432109L, 0.1944612345678901L, 0.0303598765432109L, 0.6384212345678901L, 0.6785198765432109L,
	0.9632312345678901L, 0.0691798765432109L, 0.1827412345678901L, 0.6500598765432109L, 0.4347712345678901L, 0.2814898765432109L, 0.3811612345678901L, 0.0882098765432109L,
	0.7731912345678901L, 0.2783098765432109L, 0.0725412345678901L, 0.9427098765432109L, 0.4618212345678901L, 0.1269498765432109L, 0.2526412345678901L, 0.3778598765432109L,
	0.1632712345678901L, 0.4984598765432109L, 0.6046412345678901L, 0.2404398765432109L, 0.3413912345678901L, 0.2197198765432109L, 0.2470612345678901L, 0.2197398765432109L,
	0.3033512345678901L, 0.7504798765432109L, 0.5515212345678901L, 0.3169698765432109L, 0.1400212345678901L, 0.5595398765432109L, 0.7869612345678901L, 0.1695498765432109L,
	0.7393212345678901L, 0.8565198765432109L, 0.2038912345678901L, 0.0167598765432109L, 0.6806012345678901L, 0.1944698765432109L, 0.0303512345678901L, 0.6384298765432109L,
	0.6785112345678901L, 0.9632398765432109L, 0.0691712345678901L, 0.1827498765432109L, 0.6500512345678901L, 0.4347798765432109L, 0.2814812345678901L, 0.3811698765432109L,
	0.0882012345678901L, 0.7731998765432109L, 0.2783012345678901L, 0.0725498765432109L, 0.9427012345678901L, 0.4618298765432109L, 0.1269412345678901L, 0.2526498765432109L,
	0.3778512345678901L, 0.1632798765432109L, 0.4984512345678901L, 0.6046498765432109L, 0.2404312345678901L, 0.3413998765432109L, 0.2197112345678901L, 0.2470698765432109L,
	0.2197312345678901L, 0.3033598765432109L, 0.7504712345678901L, 0.5515298765432109L, 0.3169612345678901L, 0.1400298765432109L, 0.5595312345678901L, 0.7869698765432109L,
	0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L, 0.0167512345678901L, 0.6806098765432109L, 0.1944612345678901L, 0.0303598765432109L,
	0.6384212345678901L, 0.6785198765432109L, 0.9632312345678901L, 0.0691798765432109L, 0.1827412345678901L, 0.6500598765432109L, 0.4347712345678901L, 0.2814898765432109L,
	0.3811612345678901L, 0.0882098765432109L, 0.7731912345678901L, 0.2783098765432109L, 0.0725412345678901L, 0.9427098765432109L, 0.4618212345678901L, 0.1269498765432109L,
	0.2526412345678901L, 0.3778598765432109L, 0.1632712345678901L, 0.4984598765432109L, 0.6046412345678901L, 0.2404398765432109L, 0.3413912345678901L, 0.2197198765432109L,
	0.2470612345678901L, 0.2197398765432109L, 0.3033512345678901L, 0.7504798765432109L, 0.5515212345678901L, 0.3169698765432109L, 0.1400212345678901L, 0.5595398765432109L,
	0.7869612345678901L, 0.1695498765432109L, 0.7393212345678901L, 0.8565198765432109L, 0.2038912345678901L, 0.0167598765432109L, 0.6806012345678901L, 0.1944698765432109L,
	0.0303512345678901L, 0.6384298765432109L, 0.6785112345678901L, 0.9632398765432109L, 0.0691712345678901L, 0.1827498765432109L, 0.6500512345678901L, 0.4347798765432109L,
	0.2814812345678901L, 0.3811698765432109L, 0.0882012345678901L, 0.7731998765432109L, 0.2783012345678901L, 0.0725498765432109L, 0.9427012345678901L, 0.4618298765432109L,
	0.1269412345678901L, 0.2526498765432109L, 0.3778512345678901L, 0.1632798765432109L, 0.4984512345678901L, 0.6046498765432109L, 0.2404312345678901L, 0.3413998765432109L,
	0.2197112345678901L, 0.2470698765432109L, 0.2197312345678901L, 0.3033598765432109L, 0.7504712345678901L, 0.5515298765432109L, 0.3169612345678901L, 0.1400298765432109L,
	0.5595312345678901L, 0.7869698765432109L, 0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L, 0.0167512345678901L, 0.6806098765432109L,
	0.1944612345678901L, 0.0303598765432109L, 0.6384212345678901L, 0.6785198765432109L, 0.9632312345678901L, 0.0691798765432109L, 0.1827412345678901L, 0.6500598765432109L,
	0.1400212345678901L, 0.5595398765432109L, 0.7869612345678901L, 0.1695498765432109L, 0.7393212345678901L, 0.8565198765432109L, 0.2038912345678901L, 0.0167598765432109L,
	0.6806012345678901L, 0.1944698765432109L, 0.0303512345678901L, 0.6384298765432109L, 0.6785112345678901L, 0.9632398765432109L, 0.0691712345678901L, 0.1827498765432109L,
	0.6500512345678901L, 0.4347798765432109L, 0.2814812345678901L, 0.3811698765432109L, 0.0882012345678901L, 0.7731998765432109L, 0.2783012345678901L, 0.0725498765432109L,
	0.9427012345678901L, 0.4618298765432109L, 0.1269412345678901L, 0.2526498765432109L, 0.3778512345678901L, 0.1632798765432109L, 0.4984512345678901L, 0.6046498765432109L,
	0.2404312345678901L, 0.3413998765432109L, 0.2197112345678901L, 0.2470698765432109L, 0.2197312345678901L, 0.3033598765432109L, 0.7504712345678901L, 0.5515298765432109L,
	0.3169612345678901L, 0.1400298765432109L, 0.5595312345678901L, 0.7869698765432109L, 0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L,
	0.3778512345678901L, 0.1632798765432109L, 0.4984512345678901L, 0.6046498765432109L, 0.2404312345678901L, 0.3413998765432109L, 0.2197112345678901L, 0.2470698765432109L,
	0.2197312345678901L, 0.3033598765432109L, 0.7504712345678901L, 0.5515298765432109L, 0.3169612345678901L, 0.1400298765432109L, 0.5595312345678901L, 0.7869698765432109L,
	0.1695412345678901L, 0.7393298765432109L, 0.8565112345678901L, 0.2038998765432109L, 0.0167512345678901L, 0.6806098765432109L, 0.1944612345678901L, 0.0303598765432109L,
	0.6384212345678901L, 0.6785198765432109L, 0.9632312345678901L, 0.0691798765432109L, 0.1827412345678901L, 0.6500598765432109L, 0.4347712345678901L, 0.2814898765432109L,
	0.3811612345678901L, 0.0882098765432109L, 0.7731912345678901L, 0.2783098765432109L, 0.0725412345678901L, 0.9427098765432109L, 0.4618212345678901L, 0.1269498765432109L
	};

	operatorTest(ld_0_1_values_1, ld_0_1_values_2);





	/*
	long double max = 5001.0;

	long double a = 2.0;
	long double s = a;
	std::vector<int> iterations = {16, 32, 64};

	for (int i : iterations) {
		std::cout << "Iterations: " << i << '\n';
		if (i == 3 or i == 5) {
			continue;
		}
		newtonVerfahren_Vergleich_MathSqrt(a, s, i, max);
	}


	double start = 0.01;
	double start_increment = 0.01;
	double r = 4.0;

	int iterations = 50;

	for (int i = 0; i < iterations; i++) {
		while (r <= 4) {
			zeitmessung_logmap_default32squareroot(start, start_increment, r);

			zeitmessung_logmap_float(start, start_increment, r);
		}
	}


	std::vector<double> s_ = { 0.01, 0.08, 0.13, 0.25, 0.33, 0.41, 0.5 };
	std::vector<double> r_ = { 3.8, 3.89, 3.92, 3.985, 3.99, 4.0 };


	for (const auto& r : r_) {
		for (const auto& start : s_) {


			Logisticmap_float16 fl16(start, r);
			std::cout << "Float16, ";
			fl16.list_screen_csv(fl16.get_long_double_List());
		}
	}


	double START = 0.01;
	double START_INCREMENT = 0.2;
	double R_INCREMENT = 0.01;

	double start = START;
	double r = 3.8;

	while (r < 4) {
		while (start < 1.0) {

			Logisticmap_Default32squareroot logMap(Default32squareroot::convert_to_Default32squareroot(2, start), Default32squareroot::convert_to_Default32squareroot(2, r));
			std::cout << "squareroot, ";
			logMap.list_screen_csv();

			Logisticmap_float fl(start, r);
			std::cout << "Float, ";
			fl.list_screen_csv(fl.get_long_double_List());

			Logisticmap_double d(start, r);
			std::cout << "Double, ";
			d.list_screen_csv(d.get_long_double_List());

			start += START_INCREMENT;
		}
		start = START;
		r += R_INCREMENT;
		std::cout << '\n' << '\n';
	}

	double MAX = 100'000.0;

	long double x = 30000;
	long double highest_value = 1.0;
	long double first_value = MAX;
	Default32squareroot result(2,0,126,0);

	// Auslöschung x−sqrt(x^2+1)

	while (x < MAX) {
		Default32squareroot d = Default32squareroot::convert_to_Default32squareroot(2, x);
		Default32squareroot d_incr = Default32squareroot::convert_to_Default32squareroot(2, sqrt(x * x + 1.0));
		result = d - d_incr;
		if (result != Default32squareroot(2, 0, 0, 0)) {
			std::cout << x << '\n';
			highest_value = x;
			std::cout << result.calcX() << '\n';
		}
		else {
			if (first_value > x) {
				first_value = x;
				std::cout << first_value << '\n';
			}
		}
		x += 0.1;
	}

	std::cout <<highest_value << '\n';


	float f = 0;
	float result_float = 1.0;
	float highest_value = 1.0;
	while (f < MAX) {
		result_float = f - sqrt(f * f + 1);
		if (result_float != 0) {
			std::cout << f << '\n';
			highest_value = f;
		}
		f += 0.1;
	}
	std::cout << highest_value << '\n';
	*/




	std::cout << '\n' << "End" << '\n';
}
